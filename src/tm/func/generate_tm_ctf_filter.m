function f = generate_tm_ctf_filter(o,f)
%% tm_ctf_filtering
% Generate CTF filter for template matching. Filter is generated by first
% calculating a full-sized 1D CTF and binning it down by Fourier cropping.
%
% WW 01-2019

%% Initialize

% Size for full CTF arrays
f.full_size = max([o.wedgelist.tomo_x,o.wedgelist.tomo_y,o.wedgelist.tomo_z]);      


% Full image frequencies
f.freq_1d_full = sg_frequencyarray(zeros(1,f.full_size),o.pixelsize);

% Fourier cropped frequencies
freq_1d_crop = sg_frequencyarray(zeros(1,o.tmpl_size),o.pixelsize);
f.freq_1d_crop = freq_1d_crop(o.tmpl_cen:o.tmpl_size);

% Intialize Fourier cropping array
f.fcrop_idx = calculate_1d_crop_idx(f.full_size,o.tmpl_size);


%% Parse CTF parameters


% Parse defocii
n_ang = size(o.wedgelist(f.wedge_idx).defocus,1);

% Parse phase shift
if ~isfield(o.wedgelist(f.wedge_idx),'pshift')
    pshift = zeros(n_ang,f.full_size);
else
    pshift = repmat([o.wedgelist(f.wedge_idx).pshift],[1,f.full_size]);
end

% Parse microscope parameters
famp = o.wedgelist(f.wedge_idx).amp_contrast;
cs = o.wedgelist(f.wedge_idx).cs;
evk = o.wedgelist(f.wedge_idx).voltage;


%% Calculate CTFs

% Calculate full size CTF
full_freq = repmat(f.freq_1d_full,[n_ang,1]);
def_array = repmat(o.wedgelist(f.wedge_idx).defocus,[1,f.full_size]);
full_ctf = abs(sg_ctf(def_array,pshift,famp,cs,evk,full_freq));

% Fourier crop CTFs
f_idx = repmat(f.fcrop_idx,[n_ang,1]);
ft_ctf = fft(full_ctf,[],2);
crop_shape = [n_ang,o.tmpl_size];
crop_ft_ctf = reshape(ft_ctf(f_idx),crop_shape).*(o.tmpl_size/f.full_size);
crop_ctf = real(ifft(crop_ft_ctf,[],2));

% Crop one side of the CTF
f.crop_ctf = crop_ctf(:,o.tmpl_cen:o.tmpl_size);

%% Calculate 3D CTF


% Intialize filter
ctf_filt = zeros([o.tmpl_size,o.tmpl_size,o.tmpl_size],'single');

% Interpolate filter
for i = 1:n_ang
    
    % Interpolate filter
    F = griddedInterpolant(f.freq_1d_crop,f.crop_ctf(i,:),'cubic','none');
    interp = F(f.freq_array(f.slice_idx{i}));
    
    % Add to filter
    ctf_filt(f.slice_idx{i}) = ctf_filt(f.slice_idx{i}) + interp;
    
end

% Reweight filter
ctf_filt(isnan(ctf_filt)) = 0;
f.ctf_filt = ctf_filt.*f.slice_weight;




